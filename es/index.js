import axios from"axios";const port=40003,baseUrl=`http://localhost:${port}`,G={port:port,baseUrl:baseUrl};function getRequestUrl(e,r){let t=G.baseUrl;return e.startsWith("http")?t=e:t+=e,t}const http=function(e,r,t,n){var s={};Object.assign(s,n);n=getRequestUrl(r),r={};s.headers&&Object.assign(r,s.headers);const i={timeout:12e4,headers:r,method:e,url:n};return"GET"===String.prototype.toUpperCase.call(e)?i.params=t:i.data=t,new Promise((r,t)=>{axios.request(i).then(e=>{200===e.data.code?r(e.data.data):t(e.data)}).catch(e=>{t(e)})})};var ErrorCode;!function(e){e[e.VersionInconformity=1001]="VersionInconformity"}(ErrorCode=ErrorCode||{});class Printer{_version="0.0.1";_instence;isReady=!1;constructor(e){return this._checkVersion(),this._instence||(this._instence=this,e?.readyCb?.()),e?.instenceCb?.(),this._instence}_checkVersion(){return this.getVersion().then(e=>{if(e.clientVersion&&e.sdkVersion&&e.clientVersion!==e.sdkVersion)throw new Error(JSON.stringify({code:ErrorCode.VersionInconformity,msg:`client version ${e.clientVersion} is not match to sdk version ${e.sdkVersion}.`}));e.clientVersion&&e.sdkVersion&&e.clientVersion===e.sdkVersion&&(this.isReady=!0)})}async getVersion(){return{clientVersion:await http("GET","/version",{}),sdkVersion:this._version}}async getSources(){return http("GET","/printer/sources",{})}async getDefaultPrinter(){return http("GET","/printer/default",{})}async print(e,r){return http("POST","/printer/print",{fileUrl:e,printConf:r})}}export{Printer};
