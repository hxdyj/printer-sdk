import axios from"axios";const port={http:40003,https:40004},baseUrl={http:`http://localhost:${port.http}`,https:`https://localhost:${port.https}`},G={port:port,baseUrl:location.protocol.startsWith("https")?baseUrl.https:baseUrl.http};function getRequestUrl(t,r){let e=G.baseUrl;return t.startsWith("http")?e=t:e+=t,e}const http=function(t,r,e,s){var n={};Object.assign(n,s);s=getRequestUrl(r),r={};n.headers&&Object.assign(r,n.headers);const i={timeout:12e4,headers:r,method:t,url:s};return"GET"===String.prototype.toUpperCase.call(t)?i.params=e:i.data=e,new Promise((r,e)=>{axios.request(i).then(t=>{200===t.data.code?r(t.data.data):e(t.data)}).catch(t=>{e(t)})})};var ErrorCode;!function(t){t[t.VersionInconformity=1001]="VersionInconformity"}(ErrorCode=ErrorCode||{});class Printer{_version="0.0.1";_instence;isReady=!1;constructor(t){return this._checkVersion(),this._instence||(this._instence=this,t?.readyCb?.()),t?.instenceCb?.(),this._instence}_checkVersion(){return this.getVersion().then(t=>{if(t.clientVersion&&t.sdkVersion&&t.clientVersion!==t.sdkVersion)throw new Error(JSON.stringify({code:ErrorCode.VersionInconformity,msg:`client version ${t.clientVersion} is not match to sdk version ${t.sdkVersion}.`}));t.clientVersion&&t.sdkVersion&&t.clientVersion===t.sdkVersion&&(this.isReady=!0)})}async getVersion(){return{clientVersion:await http("GET","/version",{}),sdkVersion:this._version}}async getSources(){return http("GET","/printer/sources",{})}async getDefaultPrinter(){return http("GET","/printer/default",{})}async getPaperSizes(t){return http("GET","/printer/get/papersizes",{printerName:t})}async getTrays(t){return http("GET","/printer/get/trays",{printerName:t})}async print(t,r){return http("POST","/printer/print",{fileUrl:t,printConf:r})}}export{Printer};
