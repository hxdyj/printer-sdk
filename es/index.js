import axios from"axios";let baseUrl="";function setBaseUrl(e){baseUrl=e}function getRequestUrl(e,t){let r=baseUrl;return e.startsWith("http")?r=e:r+=e,r}const http=function(e,t,r,s){var n={};Object.assign(n,s);s=getRequestUrl(t),t={};n.headers&&Object.assign(t,n.headers);const i={timeout:12e4,headers:t,method:e,url:s};return"GET"===String.prototype.toUpperCase.call(e)?i.params=r:i.data=r,new Promise((t,r)=>{axios.request(i).then(e=>{200===e.data.code?t(e.data.data):r(e.data)}).catch(e=>{r(e)})})};var ErrorCode;!function(e){e[e.VersionInconformity=1001]="VersionInconformity"}(ErrorCode=ErrorCode||{});class Printer{_version="0.0.1";_port=40003;_baseUrl=`http://localhost:${this._port}`;_instence;isReady=!1;constructor(e){return this._checkVersion(),this._instence?e?.instenceCb?.():(this._instence=this,e?.readyCb?.(),e?.instenceCb?.(),setBaseUrl(this._baseUrl)),this._instence}_checkVersion(){return this.getVersion().then(e=>{if(e.clientVersion&&e.sdkVersion&&e.clientVersion!==e.sdkVersion)throw new Error(JSON.stringify({code:ErrorCode.VersionInconformity,msg:`client version ${e.clientVersion} is not match to sdk version ${e.sdkVersion}.`}));e.clientVersion&&e.sdkVersion&&e.clientVersion===e.sdkVersion&&(this.isReady=!0)})}async getVersion(){return{clientVersion:await http("GET","/version",{}),sdkVersion:this._version}}async getSources(){return http("GET","/printer/sources",{})}async getDefaultPrinter(){return http("GET","/printer/default",{})}async print(e,t){return http("POST","/printer/print",{fileUrl:e,printConf:t})}}export{Printer};
